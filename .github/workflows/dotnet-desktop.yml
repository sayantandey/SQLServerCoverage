# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

run-name: Releasing  $${{env.APP_NAME}} version ${{ env.APP_VERSION }} 

env:
    APP_NAME: SQLServerCoverage 
    APP_VERSION: 2.2
    DOTNET_VERSION: '7.0.x'   
    
      
jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        os: [win10-x64, ubuntu.20.04-x64, linux-x64, osx-x64]
    
    # Build Steps    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Refer : https://github.com/actions/setup-dotnet/blob/main/action.yml
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Show dotnet info'
        run: dotnet --info

      - name: Build and publish app for multiple platform
        run: >
              dotnet publish src/SQLServerCoverageCore/SQLServerCoverageCore.csproj 
              -c Release  -r ${{ matrix.os }} -o "releases/${{ matrix.os }}/SQLServerCoverage" 
              --sc true -p:PublishSingleFile=true        

      - name: 'ZIP $${{env.APP_NAME}} for ${{ matrix.os }}'
        run: Compress-Archive -Path "./releases/${{ matrix.os }}/SQLServerCoverage/*" -DestinationPath "./releases/packages/$${{env.APP_NAME}}_${{ env.APP_VERSION }}.zip"              

          
      - name: Releasing github package for ${{ matrix.os }}  
        uses: softprops/action-gh-release@v1
        with:
          name: ReportGenerator_${{ env.Version }}
          body: This release requires .NET 4.7 or .NET Core 3.1/5.x/6.x/7.x.
          tag_name: v${{ env.APP_VERSION }}
          files: ReportGenerator_${{ env.Version }}.zip  
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}          
          generate_release_notes: true
